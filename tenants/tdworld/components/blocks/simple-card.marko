$ const { 
  node, 
  alingment, 
  tableWidth, 
  imgWidth,
  contentLinkStyle,
  teaserStyle,
  contentReadMoreLinkStyle
} = input;
$ const getReadMoreText = (node) => {
  const { type, typeTitle } = node;
  const viewType = ['video', 'photo-gallery', 'whitepaper'];
  return viewType.includes(type) ? node.typeTitle : `Full ${node.typeTitle}`;
};
<common-table width=tableWidth style="border-collapse:collapse;" align=alingment class=`${alingment}` padding=0 spacing=0>
  <tr>
    <td>
      <marko-core-obj-value|{ value: image }| obj=node field="primaryImage" as="object">
        <marko-newsletter-imgix
          src=image.src
          alt=image.alt
          options={ w: imgWidth }
          class="main"
          attrs={ border: 0, width: imgWidth }
        >
          <@link href=node.siteContext.url target="_blank" />
        </marko-newsletter-imgix>
      </marko-core-obj-value>

      <marko-core-obj-text obj=node field="name" attrs={ style: { "margin-top": "10px", "text-align": "left" } } >
        <@link href=node.siteContext.url target="_blank" attrs={ style: contentLinkStyle } />
      </marko-core-obj-text>
      <div height="10" style="font-size: 10px; margin: 0; padding: 0;">&nbsp</div>
      <marko-core-obj-text tag="span" obj=node field="teaser" html=true attrs={ style: teaserStyle } />
      <marko-core-text value=getReadMoreText(node)>
        <@link href=node.siteContext.url target="_blank" attrs={ style: contentReadMoreLinkStyle } />
      </marko-core-text>
    </td>
  </tr>
</common-table>